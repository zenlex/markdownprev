{"version":3,"sources":["media/thumbsup.jpg","serviceWorker.js","actions/types.js","reducers/mdReducer.js","components/editorview.js","containers/editor.js","actions/actions.js","components/mdview.js","containers/preview.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","UPDATE_TXT","parseMd","text","parsed","marked","DOMPurify","sanitize","DEFAULT_EDITOR","thumbsup","initialState","rawtxt","markdown","mdReducer","state","action","console","log","type","Object","assign","Editorview","props","className","id","value","onChange","connect","dispatch","event","editorVal","target","MdView","useEffect","document","getElementById","innerHTML","store","createStore","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,sC,0ICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBChBSC,EAFI,a,0CCKNC,EAAU,SAAAC,GACrB,IAAIC,EAASC,IAAOF,GAElB,OADUG,IAAUC,SAASH,IAI3BI,EAAc,opB,OAwCLC,EAxCK,qJA+CdC,EAAe,CACjBC,OAAQH,EACRI,SAAUV,EAAQM,IAcPK,MAXf,WAAkD,IAA/BC,EAA8B,uDAAtBJ,EAAcK,EAAQ,uCAE/C,OADAC,QAAQC,IAAI,kBAAmBP,GACvBK,EAAOG,MACX,KAAKjB,EACH,OAAOkB,OAAOC,OAAO,GAAIN,EAAO,CAACH,OAAOI,EAAOJ,OAAQC,SAASG,EAAOH,WAEzE,QACE,OAAOE,ICjEf,IASeO,EATI,SAAAC,GAAK,OACpB,yBAAKC,UAAY,WACf,uCACA,6BACA,6CACA,8BAAUC,GAAK,SAASC,MAAOH,EAAMX,OAAQe,SAAUJ,EAAMI,aCepDC,eAdS,SAAAb,GACpB,MAAO,CACHH,OAAQG,EAAMH,WAIK,SAAAiB,GACvB,MAAO,CACHF,SAAU,SAAAG,GCfX,IAAoBC,EDgBnBF,GChBmBE,EDgBAD,EAAME,OAAON,MCf9B,CACJP,KAAKjB,EACLU,OAAQmB,EACRlB,SAAUV,EAAQ4B,UDiBTH,EApBA,SAACL,GACZ,OACI,kBAAC,EAAD,CAAYX,OAAQW,EAAMX,OAAQe,SAAUJ,EAAMI,cEc3CM,MAlBf,SAAgBV,GAQd,OAJAW,qBAAU,WACRC,SAASC,eAAe,WAAWC,UAAYd,EAAMV,YAIrD,yBAAKW,UAAY,WACf,wCACA,6BACE,yBAAKC,GAAK,cCAHG,eANS,SAAAb,GACpB,MAAO,CACHF,SAAUE,EAAMF,YAITe,EAZC,SAAAL,GACZ,OACI,kBAAC,EAAD,CAAQV,SAAUU,EAAMV,cCK1ByB,EAAQC,YAAYzB,GAE1B0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,IAAD,CAAUJ,MAASA,GACjB,yBAAKb,GAAG,UAAR,sBAGA,yBAAKA,GAAG,aACN,kBAAC,EAAD,MACA,kBAAC,EAAD,SAIJU,SAASC,eAAe,SR2GpB,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.29e68c80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thumbsup.348cace9.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const UPDATE_TXT = 'UPDATE_TXT';\r\n\r\nexport default UPDATE_TXT","import UPDATE_TXT from '../actions/types.js'\r\n//basic function for converting rawtxt to sanitized markdown\r\nimport DOMPurify from 'dompurify'\r\nimport marked from 'marked'\r\nimport thumbsup from '../media/thumbsup.jpg'\r\nexport const parseMd = text => {\r\n  var parsed = marked(text)\r\n  var clean = DOMPurify.sanitize(parsed)  \r\n    return clean;\r\n}\r\n\r\nconst DEFAULT_EDITOR = \r\n`\r\n[Markdown Basic Syntax Guide](https://www.markdownguide.org/basic-syntax/)  \r\n\r\nMarkdown translates easy syntax into HTML code for you.  \r\n\r\nFor instance,\r\n\r\n\\`### Heading 3\\` will get passed to the browser as:\r\n\r\n\\`\\`\\`\r\n<h3>\r\nHeading 3\r\n</h3>\r\n\\`\\`\\`\r\n\r\nYou can do almost anything such as:\r\n# H1 Headers\r\n## H2 Subheadings\r\n**Bold Text**\r\n\r\nLists are easy too!  \r\n1.First Item\r\n2.Second Item \r\n3.Is the magic number! \r\n\r\nUnordered lists use dashes(-), asterisks(*) or plus signs (+) in front of line items.\r\n\r\n- This\r\n- works\r\n* So\r\n* does\r\n* this\r\n\r\n1. You can even\r\n    2. indent\r\n    3. items\r\n    4. easily\r\n\r\nImages are possible too  \r\n![Thumbs Up](${thumbsup}#thumbsup)\r\n\r\n>Don't forget Blockquotes. \r\n>They can be useful too for emulating reply text\r\n>You can *even* put **Markdown** into a blockquote\r\n`;\r\n\r\nconst initialState = {\r\n    rawtxt: DEFAULT_EDITOR,\r\n    markdown: parseMd(DEFAULT_EDITOR)\r\n  };\r\n\r\nfunction mdReducer(state = initialState, action) {\r\n  console.log(\"initial state =\", initialState)  \r\n  switch (action.type){\r\n      case UPDATE_TXT:\r\n        return Object.assign({}, state, {rawtxt:action.rawtxt, markdown:action.markdown})\r\n        \r\n      default: \r\n        return state\r\n    }\r\n};\r\n\r\nexport default mdReducer;"," import React from 'react';\r\n \r\n //Editor is a text area (id= 'editor') \r\n //Props are the user input and the changehandler callback passed from the container via connect to Redux store\r\n //onChange ultimately calls the UPDATE_TXT type action generator which updates rawtxt and markdown in store state\r\nconst Editorview = props => (\r\n    <div className = 'wrapper'>\r\n      <h1>Editor:</h1>\r\n      <hr />\r\n      <p>Enter markdown</p>\r\n      <textarea id = 'editor' value={props.rawtxt} onChange={props.onChange} />\r\n    </div>\r\n  )\r\n\r\nexport default Editorview","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateTxt } from '../actions/actions';\r\nimport Editorview from '../components/editorview';\r\n\r\nconst Editor = (props) => {\r\n    return(\r\n        <Editorview rawtxt={props.rawtxt} onChange={props.onChange}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        rawtxt: state.rawtxt\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onChange: event => {\r\n        dispatch(updateTxt(event.target.value));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);","import UPDATE_TXT from './types'\r\n\r\nimport { parseMd } from '../reducers/mdReducer.js'\r\n\r\nexport function updateTxt (editorVal){\r\n    return{\r\n      type:UPDATE_TXT,\r\n      rawtxt: editorVal,\r\n      markdown: parseMd(editorVal)\r\n    }\r\n  }","import React, { useEffect } from 'react';\r\n \r\n//Previewer is a container div (id = 'preview') which contains resulting markdown->HTML\r\nfunction MdView(props) {\r\n\r\n//side effect called after render() to inject the parsed markdown into the preview div\r\n//useEffect used to ensure 'preview' div has been mounted to DOM before trying to edit .innerHTML\r\n  useEffect(() => {\r\n    document.getElementById('preview').innerHTML = props.markdown\r\n  });\r\n\r\n  return(\r\n    <div className = 'wrapper'>\r\n      <h1>Preview:</h1>\r\n      <hr />\r\n        <div id = 'preview' />\r\n    </div>\r\n  )\r\n\r\n};\r\n\r\nexport default MdView;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MdView from '../components/mdview';\r\nconst Preview = props => {\r\n    return(\r\n        <MdView markdown={props.markdown}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        markdown: state.markdown\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Preview);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport mdReducer from './reducers/mdReducer'\r\nimport Editor from './containers/editor'\r\nimport Preview from './containers/preview'\r\n\r\nconst store = createStore(mdReducer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  <Provider store = {store}>\r\n    <div id='header'>\r\n      MARKDOWN PREVIEWER\r\n    </div>\r\n    <div id='container'>\r\n      <Editor />\r\n      <Preview />\r\n    </div>\r\n  </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}